# Note: set the environment variable ${N} to the number of processes to use for parallel
# builds and testing (overrides the default (4) used on CircleCI servers).

version: 2.1

jobs:
  deploy-p:                    # deployment predicate used to simplify the workflow
    docker:
      - image: busybox:latest   # the smallest image I could find
    steps:
      - run:
          command: "true"

  build:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.5

    parameters:
      cc:
        type: string
      cxx:
        type: string
      cmake_prefix:
        type: string
      petsc_dir:
        type: string
      python:
        type: string            # actually a flag: "Yes" or "No"

    environment:
      CC: << parameters.cc >>
      CXX: << parameters.cxx >>
      CMAKE_PREFIX: << parameters.cmake_prefix >>
      PETSC_DIR: << parameters.petsc_dir >>
      BUILD_PYTHON_BINDINGS: << parameters.python >>
      CCACHE_COMPRESS: 1
      LOCAL_LIBRARIES: "~/local/hdf5;~/local/netcdf;~/local/pnetcdf;~/local/parallelio"

    steps:
      - checkout
      - restore_cache:
          keys:
            - ccache-{{ .Branch }}
      - run:
          name: Create the build directory
          command: mkdir -p build
      - run:
          name: Configure PISM
          # CMAKE_BUILD_TYPE=Debug enables pedantic compiler warnings and one or two extra
          # tests.
          #
          # CMAKE_CXX_FLAGS is set to treat all warnings as errors except for the one
          # about the "noreturn" attribute.
          #
          # We need Python bindings and extra executables for many regression tests.
          #
          # PROJ, NetCDF built with parallel I/O, and PnetCDF are optional dependencies but
          # we should build and test the code that uses them. The same applies to ICEBIN.
          #
          # CMAKE_FIND_ROOT_PATH points to HDF5 and NetCDF with support for parallel I/O.
          command: >-
            ${CMAKE_PREFIX}/bin/cmake -B build -S .
            -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld"
            -DCMAKE_MODULE_LINKER_FLAGS="-fuse-ld=lld"
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_FIND_ROOT_PATH=${LOCAL_LIBRARIES}
            -DCMAKE_C_FLAGS="-Werror"
            -DCMAKE_CXX_FLAGS="-Werror"
            -DPism_USE_PROJ=Yes
            -DPism_USE_PARALLEL_NETCDF4=Yes
            -DPism_USE_PNETCDF=Yes
            -DPism_USE_PIO=Yes
            -DPython_ADDITIONAL_VERSIONS=3
            -DPism_BUILD_PYTHON_BINDINGS=${BUILD_PYTHON_BINDINGS}
            -DPism_BUILD_EXTRA_EXECS=Yes
            -DPism_BUILD_ICEBIN=Yes
      - run:
          name: Reset ccache stats
          command: ccache -z
      - run:
          name: Build PISM
          command: make --no-print-directory -C build -j ${N:-4} all
      - run:
          name: Print ccache stats
          command: ccache -s
      - save_cache:
          key: ccache-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.cache/ccache
      - run:
          name: Run regression tests
          command: >-
            cd build &&
            PYTHONPATH=~/project/build/site-packages:$PYTHONPATH
            ${CMAKE_PREFIX}/bin/ctest -j ${N:-4} --output-on-failure

  build-minimal:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.5

    parameters:
      cc:
        type: string
      cxx:
        type: string

    environment:
      CC: << parameters.cc >>
      CXX: << parameters.cxx >>
      CCACHE_COMPRESS: 1
      LOCAL_LIBRARIES: "~/local/hdf5;~/local/netcdf;~/local/pnetcdf;~/local/parallelio"

    steps:
      - checkout
      - restore_cache:
          keys:
            - ccache-minimal-{{ .Branch }}
      - run:
          name: Create the build directory
          command: mkdir -p build
      - run:
          name: Configure PISM
          command: >-
            cmake -B build -S .
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_CXX_FLAGS="-Werror"
            -DCMAKE_FIND_ROOT_PATH=${LOCAL_LIBRARIES}
      - run:
          name: Reset ccache stats
          command: ccache -z
      - run:
          name: Build PISM
          command: make --no-print-directory -C build -j ${N:-4} all
      - run:
          name: Print ccache stats
          command: ccache -s
      - save_cache:
          key: ccache-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.cache/ccache

  manual-html:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.5

    steps:
      - checkout
      - run:
          name: Build the HTML version of the manual
          command: |
            mkdir -p build
            cmake -B build -S doc/
            make -C build manual_html
      - persist_to_workspace:
          root: build/sphinx
          paths: html

  deploy-manual-html:
    docker:
      - image: node:8.10.0

    steps:
      - checkout
      - attach_workspace:
          at: manual
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ckhroulev@alaska.edu"
            git config user.name "CI Builder (PISM manual)"
      - add_ssh_keys:
          fingerprints:
            - "0a:88:9e:95:a9:35:1b:54:f6:0e:4a:f8:3d:34:ef:30"
      - run:
          name: Deploy the HTML version of the manual to GitHub Pages
          command: >-
            gh-pages
            --repo git@github.com:pism/docs.git
            --dotfiles
            --message "Update the manual"
            --dist manual/html

  manual-pdf:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.5

    steps:
      - checkout
      - run:
          name: Build the PDF version of the manual
          command: |
            mkdir -p build
            cmake -B build -S doc/
            make -C build manual_pdf
      - persist_to_workspace:
          root: build/sphinx/
          paths: pism_manual.pdf

  deploy-manual-pdf:
    docker:
      - image: node:8.10.0

    steps:
      - checkout
      - attach_workspace:
          at: manual
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ckhroulev@alaska.edu"
            git config user.name "CI Builder (PISM manual)"
      - add_ssh_keys:
          fingerprints:
            - "84:ac:e8:7c:d0:24:f7:51:dd:e6:89:dc:59:bc:9a:b7"
      - run:
          name: Deploy the PDF version of the manual to GitHub
          command: >-
            gh-pages
            --repo git@github.com:pism/docs-pdf.git
            --branch main
            --message "Update the manual"
            --dist manual/

  source-browser:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.5

    steps:
      - checkout
      - run:
          name: Build the source code browser
          command: |
            mkdir -p build
            cmake -B build -S doc/
            make -C build browser
            rm -f build/browser/html/*.md5
            touch build/browser/html/.nojekyll
            du -sh build/browser/html/
      - persist_to_workspace:
          root: build/browser/
          paths: html

  deploy-source-browser:
    docker:
      - image: node:8.10.0

    steps:
      - checkout
      - attach_workspace:
          at: browser
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ckhroulev@alaska.edu"
            git config user.name "CI Builder (PISM manual)"
      - add_ssh_keys:
          fingerprints:
            - "fd:20:f4:23:95:b7:99:85:e9:e2:d9:78:75:22:fb:6c"
      - run:
          name: Deploy the source code browser to GitHub Pages
          command: >-
            gh-pages
            --repo git@github.com:pism/doxygen.git
            --dotfiles
            --message "Update the source code browser"
            --dist browser/html

workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          name: gcc
          cc: ccache mpicc -cc=gcc
          cxx: ccache mpicxx -cxx=g++
          cmake_prefix: /usr
          petsc_dir: /home/builder/local/petsc
          python: "Yes"

      - build:
          name: clang
          cc: ccache mpicc -cc=clang
          cxx: ccache mpicxx -cxx=clang++
          cmake_prefix: /usr
          petsc_dir: /home/builder/local/petsc
          python: "Yes"

      - build:
          name: old-petsc
          cc: ccache mpicc -cc=clang
          cxx: ccache mpicxx -cxx=clang++
          cmake_prefix: /usr
          petsc_dir: /home/builder/local/petsc-3.7.0
          python: "No"

      - build:
          name: old-cmake
          cc: ccache mpicc -cc=clang
          cxx: ccache mpicxx -cxx=clang++
          cmake_prefix: /home/builder/local/cmake-3.3.0
          petsc_dir: /home/builder/local/petsc
          python: "Yes"

      - build-minimal:
          name: gcc-minimal
          cc: ccache mpicc -cc=gcc
          cxx: ccache mpicxx -cxx=g++

      - build-minimal:
          name: clang-minimal
          cc: ccache mpicc -cc=clang
          cxx: ccache mpicxx -cxx=clang++

      - manual-html
      - manual-pdf
      - source-browser

      - deploy-p:
          requires:
            - gcc
            - gcc-minimal
            - clang
            - clang-minimal
            - old-petsc
            - old-cmake
            - manual-html
            - manual-pdf
            - source-browser
          filters:
            branches:
              only: main

      - deploy-manual-html:
          requires:
            - deploy-p
      - deploy-manual-pdf:
          requires:
            - deploy-p
      - deploy-source-browser:
          requires:
            - deploy-p
