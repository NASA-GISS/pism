# Note: set the environment variable ${N} to the number of processes to use for parallel
# builds and testing (overrides the default (4) used on CircleCI servers).

version: 2.1

jobs:
  deploy-p:                    # deployment predicate used to simplify the workflow
    docker:
      - image: busybox:latest   # the smallest image I could find
    steps:
      - run:
          command: "true"

  build:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.13

    parameters:
      version:                  # this parameter is needed to make a valid config (it is
                                # not used)
        type: string
      cc:
        type: string
      cxx:
        type: string
      cmake_prefix:
        type: string
      petsc_dir:
        type: string
      python:
        type: string            # actually a flag: "Yes" or "No"

    environment:
      CC: << parameters.cc >>
      CXX: << parameters.cxx >>
      CMAKE_PREFIX: << parameters.cmake_prefix >>
      PETSC_DIR: << parameters.petsc_dir >>
      BUILD_PYTHON_BINDINGS: << parameters.python >>

    steps:
      - checkout
      - run:
          name: Build PISM
          command: >-
            bash -x ./docker/ubuntu-ci/build.sh
      - run:
          name: Run regression tests
          command: >-
            bash -x ./docker/ubuntu-ci/run-tests.sh

  build-minimal:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.13

    parameters:
      cc:
        type: string
      cxx:
        type: string
      cmake_prefix:
        type: string

    environment:
      CC: << parameters.cc >>
      CXX: << parameters.cxx >>
      CMAKE_PREFIX: << parameters.cmake_prefix >>
      LOCAL_LIBRARIES: "/home/builder/local/hdf5;/home/builder/local/netcdf;/home/builder/local/pnetcdf;/home/builder/local/parallelio"

    steps:
      - checkout
      - run:
          name: Create the build directory
          command: mkdir -p build
      - run:
          name: Configure PISM
          command: >-
            cd build &&
            ${CMAKE_PREFIX}/bin/cmake ..
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_CXX_FLAGS="-Werror"
            -DCMAKE_PREFIX_PATH=${LOCAL_LIBRARIES}
      - run:
          name: Build PISM
          command: make --no-print-directory -C build -j ${N:-4} all

  manual-html:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.13

    steps:
      - checkout
      - run:
          name: Build the HTML version of the manual
          command: |
            mkdir -p build
            cmake -B build -S doc/
            make -C build manual_html
            mv build/sphinx/manual_html ./manual_html
      - persist_to_workspace:
          root: .
          paths: manual_html
      - run:
          name: Compress the manual
          command: tar -czvf pism_manual.tgz manual_html
      - store_artifacts:
          path: pism_manual.tgz

  deploy-manual-html:
    docker:
      - image: node:8.10.0

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ckhroulev@alaska.edu"
            git config user.name "CI Builder (PISM manual)"
      - add_ssh_keys:
          fingerprints:
            - "0a:88:9e:95:a9:35:1b:54:f6:0e:4a:f8:3d:34:ef:30"
      - run:
          name: Deploy the HTML version of the manual to GitHub Pages
          command: >-
            gh-pages
            --repo git@github.com:pism/docs.git
            --dotfiles
            --message "Update the manual"
            --dist manual_html

  manual-pdf:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.13

    steps:
      - checkout
      - run:
          name: Build the PDF version of the manual
          command: |
            mkdir -p build
            cmake -B build -S doc/
            make -C build manual_pdf
            mkdir -p manual_pdf
            mv build/sphinx/pism_manual.pdf manual_pdf/
      - persist_to_workspace:
          root: .
          paths: manual_pdf
      - store_artifacts:
          path: manual_pdf/pism_manual.pdf
          destination: pism_manual.pdf

  deploy-manual-pdf:
    docker:
      - image: node:8.10.0

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ckhroulev@alaska.edu"
            git config user.name "CI Builder (PISM manual)"
      - add_ssh_keys:
          fingerprints:
            - "84:ac:e8:7c:d0:24:f7:51:dd:e6:89:dc:59:bc:9a:b7"
      - run:
          name: Deploy the PDF version of the manual to GitHub
          command: >-
            gh-pages
            --repo git@github.com:pism/docs-pdf.git
            --branch main
            --message "Update the manual"
            --dist manual_pdf

  doxygen:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.13

    environment:
      LOCAL_LIBRARIES: "/home/builder/local/hdf5;/home/builder/local/netcdf"
      PETSC_DIR: /home/builder/local/petsc

    steps:
      - checkout
      - run:
          name: Build the source code browser
          command: |
            mkdir -p build
            cmake -B build -S . -DCMAKE_PREFIX_PATH=${LOCAL_LIBRARIES}
            make -C build browser
            mv build/doc/browser/html ./doxygen
            rm -f doxygen/*.md5
            touch doxygen/.nojekyll
            du -sh doxygen
      - persist_to_workspace:
          root: .
          paths: doxygen
      - run:
          name: Compress the doxygen browser
          command: tar -czvf pism_doxygen.tgz doxygen
      - store_artifacts:
          path: pism_doxygen.tgz

  deploy-doxygen:
    docker:
      - image: node:8.10.0

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ckhroulev@alaska.edu"
            git config user.name "CI Builder (PISM manual)"
      - add_ssh_keys:
          fingerprints:
            - "fd:20:f4:23:95:b7:99:85:e9:e2:d9:78:75:22:fb:6c"
      - run:
          name: Deploy the source code browser to GitHub Pages
          command: >-
            gh-pages
            --repo git@github.com:pism/doxygen.git
            --dotfiles
            --message "Update the source code browser"
            --dist doxygen

  build-and-test-with-ubuntu-libs:
    docker:
      - image: ckhrulev/pism-ubuntu-deb-package:0.1.2

    environment:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: yes

    steps:
      - checkout
      - run:
          name: Configure PISM
          command: >-
            cmake -S . -B build
            -DCMAKE_BUILD_TYPE=Debug
            -DPism_USE_PROJ=YES
      - run:
          name: Build PISM
          command: make --no-print-directory -C build -j ${N:-4} package
      - run:
          name: Test PISM
          command: cd build && ctest -j ${N:-4} --output-on-failure

  build-deb-package:
    docker:
      - image: ckhrulev/pism-ubuntu-deb-package:0.1.2

    steps:
      - checkout
      - run:
          name: Build the PISM package
          command: bash -x ./docker/ubuntu-deb-package/build-package.sh
      - run:
          name: Move the package
          command: mkdir -p /tmp/package && mv build/*.deb /tmp/package/
      - run:
          name: Test the package
          command: lintian /tmp/package/*.deb
      - store_artifacts:
          path: /tmp/package

  build-and-test-with-intel-oneapi:
    docker:
      - image: ckhrulev/pism-ubuntu-intel:0.2.0

    environment:
      source_dir: /home/worker/project

    steps:
      - checkout
      - run:
          name: Build PISM
          command: bash -x ./docker/ubuntu-ci-intel/build.sh
      - run:
          name: Run regression tests
          command: bash -x ./docker/ubuntu-ci-intel/run-tests.sh

  clang-static-analyzer:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.13

    steps:
      - checkout
      - run:
          name: Run Clang's static analyzer
          command: bash -x ./docker/ubuntu-ci/static-analyzer.sh

workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          name: gcc-<< matrix.version >>
          cc: gcc-<< matrix.version >>
          cxx: g++-<< matrix.version >>
          cmake_prefix: /usr
          petsc_dir: /home/builder/local/petsc
          python: "Yes"
          matrix:
            parameters:
              version: ["9", "10", "11", "12", "13", "14"]

      - build:
          name: clang-<< matrix.version >>
          cc: clang-<< matrix.version >>
          cxx: clang++-<< matrix.version >>
          cmake_prefix: /usr
          petsc_dir: /home/builder/local/petsc
          python: "Yes"
          matrix:
            parameters:
              version: ["14", "15", "16", "17", "18"]

      - build:
          version: default
          name: old-petsc
          cc: clang-18
          cxx: clang++-18
          cmake_prefix: /usr
          petsc_dir: /home/builder/local/petsc-3.7.0
          python: "No"

      - build:
          version: default
          name: petsc-64bit
          cc: clang-18
          cxx: clang++-18
          cmake_prefix: /usr
          petsc_dir: /home/builder/local/petsc-64bit
          python: "Yes"

      - build:
          version: default
          name: old-cmake
          cc: clang-18
          cxx: clang++-18
          cmake_prefix: /home/builder/local/cmake-3.16.0
          petsc_dir: /home/builder/local/petsc
          python: "Yes"

      - build-minimal:
          name: gcc-minimal
          cc: gcc-14
          cxx: g++-14
          cmake_prefix: /usr

      - build-minimal:
          name: clang-minimal
          cc: clang-18
          cxx: clang++-18
          cmake_prefix: /usr

      - build-minimal:
          name: old-cmake-minimal
          cc: clang-18
          cxx: clang++-18
          cmake_prefix: /home/builder/local/cmake-3.16.0

      - manual-html
      - manual-pdf
      - doxygen
      - build-and-test-with-ubuntu-libs
      - build-and-test-with-intel-oneapi
      - build-deb-package
      - clang-static-analyzer

      - deploy-p:
          requires:
            - gcc-9
            - gcc-10
            - gcc-11
            - gcc-12
            - gcc-13
            - gcc-14
            - gcc-minimal
            - clang-14
            - clang-15
            - clang-16
            - clang-17
            - clang-18
            - clang-minimal
            - clang-static-analyzer
            - old-petsc
            - old-cmake
            - old-cmake-minimal
            - manual-html
            - manual-pdf
            - doxygen
            - build-and-test-with-ubuntu-libs
            - build-deb-package
            - build-and-test-with-intel-oneapi
          filters:
            branches:
              only: main

      - deploy-manual-html:
          requires:
            - deploy-p
      - deploy-manual-pdf:
          requires:
            - deploy-p
      - deploy-doxygen:
          requires:
            - deploy-p
